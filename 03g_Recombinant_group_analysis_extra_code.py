import argparse
import pandas as pd
from operator import countOf
from matplotlib import pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

parser = argparse.ArgumentParser(description="Considering one reference genome, the scripts calculates the number of recombinant genes with another partner and with a 3rd partner as well as the number of non-recombinant genes. It also calculates percentage of mismatch and length for each group of genes (recombinant, recombinant 3rd partner or non-recombinant). To do so, it uses as input the '_group_data.tsv' table generated by the 03g_Recombinant_group_analysis.py script from Roth's pipeline")
parser.add_argument("--tab", type=str,help="'_group_data.tsv' table generated by the 03g_Recombinant_group_analysis.py script from Roth's pipeline. Mandatory", required=True)
parser.add_argument("--out", type=str,help="Output prefix. Mandatory", required=True)
parser.add_argument("--rec", type=float,help="Identity threshold for recombining genes. Default=99.8", default=99.8)
args = parser.parse_args()


def parse_data(df_group, rec):
    print("\n\nParsing data...\n\n")
    ref_genome=df_group['Genome'].unique()[0]
    num_genomes=len(df_group['Match Genome'].unique())
    dic=dict()
    for i in df_group['Gene'].unique():
        sub=df_group[df_group['Gene'] == i]
        if sub['pID'].max() < rec:
            dic[i]="Non-recombinant"
        elif sub['pID'].min() == 100.0 and len(sub['Match Genome'].unique()) == num_genomes:
            dic[i]="Conserved"
        elif sub['pID'].max() >= rec:
            dic[i]="Recombinant"


    values=['Non-recombinant','Conserved','Recombinant']
    res_dic=dict()
    print("\n\nGenes of genome {}:".format(ref_genome))
    for x in values:
        num = countOf(dic.values(), x)
        res_dic[x] = num
        print('\t'.join([x,str(num)]))
    print("\n\n")


    df_recom=pd.DataFrame.from_dict(dic, 'index').reset_index()
    df_recom.columns=['Gene','Recombinant_new']
    df_group_merged=pd.merge(df_group, df_recom, on='Gene',how='inner').drop_duplicates() # Merge gene category df and drop duplicated rows
    return(df_group_merged)


def get_statistics(df, genome, list):
    subset=df[df['Match Genome'] == genome]
    
    mismatch_total = subset['Mismatch'].astype(int).sum()
    
    mismatch_norec = subset[subset['Recombinant_new'] == "Non-recombinant"]['Mismatch'].astype(int).sum()
    num_genes_norec = len(subset[(subset['Recombinant_new'] == "Non-recombinant") & (subset['Recombinant'] == "Non-recombinant")]['Gene'].unique())
    len_norec = subset[(subset['Recombinant_new'] == "Non-recombinant") & (subset['Recombinant'] == "Non-recombinant")]['Width'].astype(int).sum()
    
    num_genes_rec = len(subset[(subset['Recombinant_new'] == "Recombinant") & (subset['Recombinant'] == "Recombinant")]['Gene'].unique())
    len_rec = subset[(subset['Recombinant_new'] == "Recombinant") & (subset['Recombinant'] == "Recombinant")]['Width'].astype(int).sum()
    
    mismatch_rec_third_partner = subset[(subset['Recombinant_new'] == "Recombinant") & (subset['Recombinant'] == "Non-recombinant")]['Mismatch'].astype(int).sum()
    num_genes_rec_third_partner = len(subset[(subset['Recombinant_new'] == "Recombinant") & (subset['Recombinant'] == "Non-recombinant")]['Gene'].unique())
    len_rec_third_partner = subset[(subset['Recombinant_new'] == "Recombinant") & (subset['Recombinant'] == "Non-recombinant")]['Width'].astype(int).sum()
    
    if mismatch_norec > 0:
        try:
            perc_mismatch_norec = mismatch_norec / mismatch_total * 100
        except TypeError:
            perc_mismatch_norec = 0
    else:
         perc_mismatch_norec = 0
    
    if mismatch_rec_third_partner > 0:
        try:
            perc_mismatch_rec_third_partner = mismatch_rec_third_partner / mismatch_total * 100
        except TypeError:
            perc_mismatch_rec_third_partner = 0
    else:
        perc_mismatch_rec_third_partner = 0
    
    list.append([genome , num_genes_rec, num_genes_rec_third_partner, num_genes_norec,
                                mismatch_rec_third_partner, mismatch_norec, mismatch_total, perc_mismatch_rec_third_partner, perc_mismatch_norec,
                                len_rec, len_rec_third_partner, len_norec])
    
    print("Done for genome {}".format(genome))
    return(list)


def plots(df_final, out, ref):
    print("\n\nPlotting results...\n\n")
    p=PdfPages(out)
    # Plot results
    # Plot A
    fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(18, 7))
    plt.subplots_adjust(wspace=0.52)
    plt.suptitle("Reference genome: {}".format(ref), fontsize=26)
    plot1=ax1.boxplot([df_final['Num_rec_genes'].astype(int), df_final['Num_rec_genes_3rd_partner'].astype(int), df_final['Num_norec_genes'].astype(int)],
            patch_artist=True,
            medianprops = dict(color = "black"), widths=(0.75, 0.75, 0.75))
    ax1.set_ylabel('Number genes', size=26)
    ax1.tick_params(axis="y", labelsize=26)
    labels_ax1=['Recombinant', 'Recombinant\n3rd partner','Non-recombinant']
    ax1.set_xticklabels(labels=labels_ax1, rotation = 90, fontsize=26)
    ax1.set_title('A',loc="left", size=26)
    # fill with colors
    colors = ['red', 'lightblue', 'lightgreen']
    for patch, color in zip(plot1['boxes'], colors):
            patch.set_facecolor(color)


    # Plot B
    plot2=ax2.boxplot([df_final['Length_rec_genes'].astype(int), df_final['Length_rec_genes_3rd_partner'].astype(int), df_final['Length_norec'].astype(int)],
            patch_artist=True, 
            medianprops = dict(color = "black"), widths=(0.75, 0.75, 0.75))
    ax2.set_ylabel('Length (bp)', size=26)
    ax2.tick_params(axis="y", labelsize=26)
    labels_ax2=['Recombinant', 'Recombinant\n3rd partner','Non-recombinant']
    ax2.set_xticklabels(labels=labels_ax2, rotation = 90, fontsize=26)
    ax2.set_title('B',loc="left", size=26)
    # fill with colors
    colors = ['red', 'lightblue', 'lightgreen']
    for patch, color in zip(plot2['boxes'], colors):
            patch.set_facecolor(color)


    # Plot C
    plot3=ax3.boxplot([df_final['Perc_mismatch_rec_3rd_partner'].astype(int), df_final['Perc_mismatch_norec'].astype(int)],
            patch_artist=True, 
            medianprops = dict(color = "black"), widths=(0.75, 0.75))
    ax3.set_ylabel('% mismatches', size=26)
    ax3.tick_params(axis="y", labelsize=26)
    labels_ax3=['Recombinant\n3rd partner', 'Non-recombinant']
    ax3.set_xticklabels(labels=labels_ax3, rotation = 90, fontsize=26)
    ax3.set_title('C',loc="left", size=26)
    # fill with colors
    colors = ['lightblue', 'lightgreen']
    for patch, color in zip(plot3['boxes'], colors):
            patch.set_facecolor(color)

    plt.savefig(p, format="pdf", bbox_inches="tight")
    plt.close()
    p.close()


def main():
    ## Parameters ##
    rec=args.rec
    out='_'.join([args.out,'data_3rd_partner.pdf'])
    input=args.tab
    ##################

    df=pd.read_table(input,header=0,sep="\t")
    df = df.drop(df[df['Match Genome'] == "-"].index)
    ref_genome=df['Genome'].unique()[0]
    df_parsed=parse_data(df, rec)

    list_final=[]
    print("\n\nCalculating statistics...\n\n")
    for genome in df_parsed['Match Genome'].unique():
        list_final=get_statistics(df_parsed, genome, list_final)

    df_final=pd.DataFrame(list_final, columns=['Match Genome','Num_rec_genes','Num_rec_genes_3rd_partner','Num_norec_genes',
                                                'Mismatch_rec_3rd_partner','Mismatch_norec','Mismatch_total','Perc_mismatch_rec_3rd_partner','Perc_mismatch_norec',
                                                'Length_rec_genes','Length_rec_genes_3rd_partner','Length_norec'])

    df_final.to_csv(''.join([args.out, "_data_3rd_partner_tab.tsv"]), sep = "\t", index = False)
    plots(df_final, out, ref_genome)


if __name__ == '__main__':
    main()
